import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

plugins {
    id 'org.springframework.boot' version '2.3.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'com.bmuschko.docker-remote-api' version "$dockerVersion"
    id 'java'
}

group = 'az.ingress'
version = ''
//sourceCompatibility = '11'
sourceCompatibility = 1.8
targetCompatibility = 1.8
allprojects {
    group = 'az.ingress'
    def hash = 'git rev-parse --short HEAD'.execute().text.trim()
    version = "$projectVersion.$hash"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation("org.modelmapper:modelmapper:$modelmapperVersion")
    implementation 'org.liquibase:liquibase-core'
    runtimeOnly "mysql:mysql-connector-java:${mysqlVersion}"
    compileOnly 'org.projectlombok:lombok'

    testCompile("junit:junit")
    testCompile 'org.assertj:assertj-core:3.4.1'
    compile('org.springframework.boot:spring-boot-starter-data-jpa')

    annotationProcessor 'org.projectlombok:lombok'
   testImplementation('org.springframework.boot:spring-boot-starter-test'){
       exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
   }

    testRuntime "com.h2database:h2"
//    runtime('com.h2database:h2')



}



test {
    useJUnitPlatform()
}

task dockerFile(type: Dockerfile, dependsOn: assemble) {
    destFile.set(project.file('Dockerfile'))
    from "alpine:$alpineVersion"
    runCommand 'apk add --no-cache openjdk8'
    copyFile "build/libs/${jar.archiveFileName.get()}", '/app/'
    workingDir '/app/'
    entryPoint 'java'
    defaultCommand '-jar', "/app/${jar.archiveFileName.get()}"
}

task dockerBuild(type: DockerBuildImage, dependsOn: dockerFile) {
    inputDir.set(file('.'))
    println("pushing image: $dockerRepoUrl/${project.name}:$version")
    images.add("$dockerRepoUrl/${project.name}:$version")
}

task dockerPush(type: DockerPushImage, dependsOn: dockerBuild) {
    images.add("$dockerRepoUrl/${project.name}:$version")

    registryCredentials.setUsername("$dockerHubUsername")
    registryCredentials.setPassword("$dockerHubPassword")
    registryCredentials.setEmail("$dockerHubEmail")
}
